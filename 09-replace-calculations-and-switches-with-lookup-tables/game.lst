ca65 V2.18 - Ubuntu 2.18-1
Main file   : game.s
Current file: game.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_start_benchmark
000000r 1               	.export		_ticks
000000r 1               	.export		_end_benchmark
000000r 1               	.exportzp	_index1
000000r 1               	.export		_game_state
000000r 1               	.export		_get_entity_tile
000000r 1               	.export		_div_10_lookup
000000r 1               	.export		_mod_10_lookup
000000r 1               	.export		_screen_line_lookup
000000r 1               	.export		_place_enemy
000000r 1               	.export		_set_entities
000000r 1               	.export		_draw_entity
000000r 1               	.export		_damage_enemy
000000r 1               	.export		_one_frame
000000r 1               	.export		_init_lookup_tables
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               .segment	"ZEROPAGE"
000000r 1               .segment	"DATA"
000000r 1               _get_entity_tile:
000000r 1  78           	.byte	$78
000001r 1  70           	.byte	$70
000002r 1  65           	.byte	$65
000003r 1               
000003r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0042:
000000r 1  25 75 20 74  	.byte	$25,$75,$20,$74,$69,$63,$6B,$73,$00
000004r 1  69 63 6B 73  
000008r 1  00           
000009r 1               
000009r 1               .segment	"BSS"
000000r 1               
000000r 1               _ticks:
000000r 1  00 00        	.res	2,$00
000002r 1               .segment	"ZEROPAGE"
000000r 1               _index1:
000000r 1  00           	.res	1,$00
000001r 1               .segment	"BSS"
000002r 1               _game_state:
000002r 1  00 00 00 00  	.res	125,$00
000006r 1  00 00 00 00  
00000Ar 1  00 00 00 00  
00007Fr 1               _div_10_lookup:
00007Fr 1  00 00 00 00  	.res	100,$00
000083r 1  00 00 00 00  
000087r 1  00 00 00 00  
0000E3r 1               _mod_10_lookup:
0000E3r 1  00 00 00 00  	.res	100,$00
0000E7r 1  00 00 00 00  
0000EBr 1  00 00 00 00  
000147r 1               _screen_line_lookup:
000147r 1  00 00 00 00  	.res	48,$00
00014Br 1  00 00 00 00  
00014Fr 1  00 00 00 00  
000177r 1               
000177r 1               ; ---------------------------------------------------------------
000177r 1               ; void __near__ start_benchmark (void)
000177r 1               ; ---------------------------------------------------------------
000177r 1               
000177r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_start_benchmark: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; asm("SEI");
000000r 1               ;
000000r 1  78           	sei
000001r 1               ;
000001r 1               ; asm("lda $14");
000001r 1               ;
000001r 1  A5 14        	lda     $14
000003r 1               ;
000003r 1               ; asm("cmp $14");
000003r 1               ;
000003r 1  C5 14        L0025:	cmp     $14
000005r 1               ;
000005r 1               ; asm("beq %g", wvb);
000005r 1               ;
000005r 1  F0 FC        	beq     L0025
000007r 1               ;
000007r 1               ; asm("lda #0");
000007r 1               ;
000007r 1  A9 00        	lda     #0
000009r 1               ;
000009r 1               ; asm("sta $13");
000009r 1               ;
000009r 1  85 13        	sta     $13
00000Br 1               ;
00000Br 1               ; asm("sta $14");
00000Br 1               ;
00000Br 1  85 14        	sta     $14
00000Dr 1               ;
00000Dr 1               ; asm("CLI");
00000Dr 1               ;
00000Dr 1  58           	cli
00000Er 1               ;
00000Er 1               ; }
00000Er 1               ;
00000Er 1  60           	rts
00000Fr 1               
00000Fr 1               .endproc
00000Fr 1               
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               ; void __near__ end_benchmark (void)
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               .proc	_end_benchmark: near
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               ;
00000Fr 1               ; asm("SEI");
00000Fr 1               ;
00000Fr 1  78           	sei
000010r 1               ;
000010r 1               ; asm("lda $14");
000010r 1               ;
000010r 1  A5 14        	lda     $14
000012r 1               ;
000012r 1               ; asm("sta %v", ticks);
000012r 1               ;
000012r 1  8D rr rr     	sta     _ticks
000015r 1               ;
000015r 1               ; asm("lda $13");
000015r 1               ;
000015r 1  A5 13        	lda     $13
000017r 1               ;
000017r 1               ; asm("sta %v+1", ticks);
000017r 1               ;
000017r 1  8D rr rr     	sta     _ticks+1
00001Ar 1               ;
00001Ar 1               ; asm("CLI");
00001Ar 1               ;
00001Ar 1  58           	cli
00001Br 1               ;
00001Br 1               ; printf("%u ticks", ticks);
00001Br 1               ;
00001Br 1  A9 rr        	lda     #<(L0042)
00001Dr 1  A2 rr        	ldx     #>(L0042)
00001Fr 1  20 rr rr     	jsr     pushax
000022r 1  AD rr rr     	lda     _ticks
000025r 1  AE rr rr     	ldx     _ticks+1
000028r 1  20 rr rr     	jsr     pushax
00002Br 1  A0 04        	ldy     #$04
00002Dr 1  4C rr rr     	jmp     _printf
000030r 1               
000030r 1               .endproc
000030r 1               
000030r 1               ; ---------------------------------------------------------------
000030r 1               ; void __near__ place_enemy (unsigned char, unsigned char)
000030r 1               ; ---------------------------------------------------------------
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               .proc	_place_enemy: near
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               ;
000030r 1               ; {
000030r 1               ;
000030r 1  20 rr rr     	jsr     pusha
000033r 1               ;
000033r 1               ; game_state.entities.x[index1] = x;
000033r 1               ;
000033r 1  A0 01        	ldy     #$01
000035r 1  B1 rr        	lda     (sp),y
000037r 1  A4 rr        	ldy     _index1
000039r 1  99 rr rr     	sta     _game_state,y
00003Cr 1               ;
00003Cr 1               ; game_state.entities.y[index1] = y;
00003Cr 1               ;
00003Cr 1  A0 00        	ldy     #$00
00003Er 1  B1 rr        	lda     (sp),y
000040r 1  A4 rr        	ldy     _index1
000042r 1  99 rr rr     	sta     _game_state+31,y
000045r 1               ;
000045r 1               ; }
000045r 1               ;
000045r 1  4C rr rr     	jmp     incsp2
000048r 1               
000048r 1               .endproc
000048r 1               
000048r 1               ; ---------------------------------------------------------------
000048r 1               ; void __near__ set_entities (void)
000048r 1               ; ---------------------------------------------------------------
000048r 1               
000048r 1               .segment	"CODE"
000048r 1               
000048r 1               .proc	_set_entities: near
000048r 1               
000048r 1               .segment	"CODE"
000048r 1               
000048r 1               ;
000048r 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
000048r 1               ;
000048r 1  A9 00        	lda     #$00
00004Ar 1  85 rr        	sta     _index1
00004Cr 1  A5 rr        L00EC:	lda     _index1
00004Er 1  C9 1E        	cmp     #$1E
000050r 1  B0 2E        	bcs     L00ED
000052r 1               ;
000052r 1               ; place_enemy((index1*5) % SCREEN_SIZE_X, index1 / 2 + 9);
000052r 1               ;
000052r 1  A2 00        	ldx     #$00
000054r 1  A5 rr        	lda     _index1
000056r 1  20 rr rr     	jsr     mulax5
000059r 1  20 rr rr     	jsr     pushax
00005Cr 1  A9 28        	lda     #$28
00005Er 1  20 rr rr     	jsr     tosumoda0
000061r 1  20 rr rr     	jsr     pusha
000064r 1  A5 rr        	lda     _index1
000066r 1  4A           	lsr     a
000067r 1  18           	clc
000068r 1  69 09        	adc     #$09
00006Ar 1  20 rr rr     	jsr     _place_enemy
00006Dr 1               ;
00006Dr 1               ; game_state.entities.hp[index1] = 99;
00006Dr 1               ;
00006Dr 1  A4 rr        	ldy     _index1
00006Fr 1  A9 63        	lda     #$63
000071r 1  99 rr rr     	sta     _game_state+62,y
000074r 1               ;
000074r 1               ; game_state.entities.type[index1] = ENTITY_ENEMY;
000074r 1               ;
000074r 1  A4 rr        	ldy     _index1
000076r 1  A9 02        	lda     #$02
000078r 1  99 rr rr     	sta     _game_state+93,y
00007Br 1               ;
00007Br 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
00007Br 1               ;
00007Br 1  E6 rr        	inc     _index1
00007Dr 1  4C rr rr     	jmp     L00EC
000080r 1               ;
000080r 1               ; game_state.entities.hp[PLAYER_INDEX] = 99;
000080r 1               ;
000080r 1  A9 63        L00ED:	lda     #$63
000082r 1  8D rr rr     	sta     _game_state+92
000085r 1               ;
000085r 1               ; game_state.entities.x[PLAYER_INDEX] = SCREEN_SIZE_X/2;
000085r 1               ;
000085r 1  A9 14        	lda     #$14
000087r 1  8D rr rr     	sta     _game_state+30
00008Ar 1               ;
00008Ar 1               ; game_state.entities.type[PLAYER_INDEX] = ENTITY_PLAYER;
00008Ar 1               ;
00008Ar 1  A9 01        	lda     #$01
00008Cr 1  8D rr rr     	sta     _game_state+123
00008Fr 1               ;
00008Fr 1               ; };
00008Fr 1               ;
00008Fr 1  60           	rts
000090r 1               
000090r 1               .endproc
000090r 1               
000090r 1               ; ---------------------------------------------------------------
000090r 1               ; void __near__ draw_entity (void)
000090r 1               ; ---------------------------------------------------------------
000090r 1               
000090r 1               .segment	"CODE"
000090r 1               
000090r 1               .proc	_draw_entity: near
000090r 1               
000090r 1               .segment	"BSS"
000177r 1               
000177r 1               L0084:
000177r 1  00 00        	.res	2,$00
000179r 1               
000179r 1               .segment	"CODE"
000090r 1               
000090r 1               ;
000090r 1               ; unsigned char *draw_ptr = screen_line_lookup[game_state.entities.y[index1]];
000090r 1               ;
000090r 1  A4 rr        	ldy     _index1
000092r 1  A2 00        	ldx     #$00
000094r 1  B9 rr rr     	lda     _game_state+31,y
000097r 1  0A           	asl     a
000098r 1  90 02        	bcc     L00EF
00009Ar 1  E8           	inx
00009Br 1  18           	clc
00009Cr 1  69 rr        L00EF:	adc     #<(_screen_line_lookup)
00009Er 1  85 rr        	sta     ptr1
0000A0r 1  8A           	txa
0000A1r 1  69 rr        	adc     #>(_screen_line_lookup)
0000A3r 1  85 rr        	sta     ptr1+1
0000A5r 1  A0 01        	ldy     #$01
0000A7r 1  B1 rr        	lda     (ptr1),y
0000A9r 1  8D rr rr     	sta     L0084+1
0000ACr 1  88           	dey
0000ADr 1  B1 rr        	lda     (ptr1),y
0000AFr 1  8D rr rr     	sta     L0084
0000B2r 1               ;
0000B2r 1               ; draw_ptr += game_state.entities.x[index1];
0000B2r 1               ;
0000B2r 1  A4 rr        	ldy     _index1
0000B4r 1  B9 rr rr     	lda     _game_state,y
0000B7r 1  18           	clc
0000B8r 1  6D rr rr     	adc     L0084
0000BBr 1  8D rr rr     	sta     L0084
0000BEr 1  A9 00        	lda     #$00
0000C0r 1  6D rr rr     	adc     L0084+1
0000C3r 1  8D rr rr     	sta     L0084+1
0000C6r 1               ;
0000C6r 1               ; *draw_ptr = get_entity_tile[game_state.entities.type[index1]];
0000C6r 1               ;
0000C6r 1  85 rr        	sta     sreg+1
0000C8r 1  AD rr rr     	lda     L0084
0000CBr 1  85 rr        	sta     sreg
0000CDr 1  A4 rr        	ldy     _index1
0000CFr 1  B9 rr rr     	lda     _game_state+93,y
0000D2r 1  85 rr        	sta     ptr1
0000D4r 1  A9 00        	lda     #$00
0000D6r 1  18           	clc
0000D7r 1  69 rr        	adc     #>(_get_entity_tile)
0000D9r 1  85 rr        	sta     ptr1+1
0000DBr 1  A0 rr        	ldy     #<(_get_entity_tile)
0000DDr 1  B1 rr        	lda     (ptr1),y
0000DFr 1  A0 00        	ldy     #$00
0000E1r 1  91 rr        	sta     (sreg),y
0000E3r 1               ;
0000E3r 1               ; *(++draw_ptr) = div_10_lookup[game_state.entities.hp[index1]];
0000E3r 1               ;
0000E3r 1  EE rr rr     	inc     L0084
0000E6r 1  D0 03        	bne     L0094
0000E8r 1  EE rr rr     	inc     L0084+1
0000EBr 1  AD rr rr     L0094:	lda     L0084+1
0000EEr 1  85 rr        	sta     sreg+1
0000F0r 1  AD rr rr     	lda     L0084
0000F3r 1  85 rr        	sta     sreg
0000F5r 1  A4 rr        	ldy     _index1
0000F7r 1  B9 rr rr     	lda     _game_state+62,y
0000FAr 1  85 rr        	sta     ptr1
0000FCr 1  A9 00        	lda     #$00
0000FEr 1  18           	clc
0000FFr 1  69 rr        	adc     #>(_div_10_lookup)
000101r 1  85 rr        	sta     ptr1+1
000103r 1  A0 rr        	ldy     #<(_div_10_lookup)
000105r 1  B1 rr        	lda     (ptr1),y
000107r 1  A0 00        	ldy     #$00
000109r 1  91 rr        	sta     (sreg),y
00010Br 1               ;
00010Br 1               ; *(++draw_ptr) = mod_10_lookup[game_state.entities.hp[index1]];
00010Br 1               ;
00010Br 1  EE rr rr     	inc     L0084
00010Er 1  D0 03        	bne     L009B
000110r 1  EE rr rr     	inc     L0084+1
000113r 1  AD rr rr     L009B:	lda     L0084
000116r 1  AE rr rr     	ldx     L0084+1
000119r 1  20 rr rr     	jsr     pushax
00011Cr 1  A4 rr        	ldy     _index1
00011Er 1  B9 rr rr     	lda     _game_state+62,y
000121r 1  85 rr        	sta     ptr1
000123r 1  A9 00        	lda     #$00
000125r 1  18           	clc
000126r 1  69 rr        	adc     #>(_mod_10_lookup)
000128r 1  85 rr        	sta     ptr1+1
00012Ar 1  A0 rr        	ldy     #<(_mod_10_lookup)
00012Cr 1  B1 rr        	lda     (ptr1),y
00012Er 1  A0 00        	ldy     #$00
000130r 1  4C rr rr     	jmp     staspidx
000133r 1               
000133r 1               .endproc
000133r 1               
000133r 1               ; ---------------------------------------------------------------
000133r 1               ; void __near__ damage_enemy (void)
000133r 1               ; ---------------------------------------------------------------
000133r 1               
000133r 1               .segment	"CODE"
000133r 1               
000133r 1               .proc	_damage_enemy: near
000133r 1               
000133r 1               .segment	"CODE"
000133r 1               
000133r 1               ;
000133r 1               ; if (game_state.entities.hp[index1] > 0)
000133r 1               ;
000133r 1  A4 rr        	ldy     _index1
000135r 1  B9 rr rr     	lda     _game_state+62,y
000138r 1  F0 1B        	beq     L00A1
00013Ar 1               ;
00013Ar 1               ; game_state.entities.hp[index1]--;
00013Ar 1               ;
00013Ar 1  A9 rr        	lda     #<(_game_state+62)
00013Cr 1  A2 rr        	ldx     #>(_game_state+62)
00013Er 1  18           	clc
00013Fr 1  65 rr        	adc     _index1
000141r 1  90 01        	bcc     L00A7
000143r 1  E8           	inx
000144r 1  20 rr rr     L00A7:	jsr     pushax
000147r 1  85 rr        	sta     ptr1
000149r 1  86 rr        	stx     ptr1+1
00014Br 1  A0 00        	ldy     #$00
00014Dr 1  B1 rr        	lda     (ptr1),y
00014Fr 1  38           	sec
000150r 1  E9 01        	sbc     #$01
000152r 1  4C rr rr     	jmp     staspidx
000155r 1               ;
000155r 1               ; }
000155r 1               ;
000155r 1  60           L00A1:	rts
000156r 1               
000156r 1               .endproc
000156r 1               
000156r 1               ; ---------------------------------------------------------------
000156r 1               ; void __near__ one_frame (void)
000156r 1               ; ---------------------------------------------------------------
000156r 1               
000156r 1               .segment	"CODE"
000156r 1               
000156r 1               .proc	_one_frame: near
000156r 1               
000156r 1               .segment	"CODE"
000156r 1               
000156r 1               ;
000156r 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
000156r 1               ;
000156r 1  A9 00        	lda     #$00
000158r 1  85 rr        	sta     _index1
00015Ar 1  A5 rr        L00F0:	lda     _index1
00015Cr 1  C9 1E        	cmp     #$1E
00015Er 1  B0 0B        	bcs     L00F1
000160r 1               ;
000160r 1               ; damage_enemy();
000160r 1               ;
000160r 1  20 rr rr     	jsr     _damage_enemy
000163r 1               ;
000163r 1               ; draw_entity();
000163r 1               ;
000163r 1  20 rr rr     	jsr     _draw_entity
000166r 1               ;
000166r 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
000166r 1               ;
000166r 1  E6 rr        	inc     _index1
000168r 1  4C rr rr     	jmp     L00F0
00016Br 1               ;
00016Br 1               ; index1 = PLAYER_INDEX;
00016Br 1               ;
00016Br 1  A9 1E        L00F1:	lda     #$1E
00016Dr 1  85 rr        	sta     _index1
00016Fr 1               ;
00016Fr 1               ; draw_entity();
00016Fr 1               ;
00016Fr 1  4C rr rr     	jmp     _draw_entity
000172r 1               
000172r 1               .endproc
000172r 1               
000172r 1               ; ---------------------------------------------------------------
000172r 1               ; void __near__ init_lookup_tables (void)
000172r 1               ; ---------------------------------------------------------------
000172r 1               
000172r 1               .segment	"CODE"
000172r 1               
000172r 1               .proc	_init_lookup_tables: near
000172r 1               
000172r 1               .segment	"BSS"
000179r 1               
000179r 1               L00B8:
000179r 1  00 00        	.res	2,$00
00017Br 1               
00017Br 1               .segment	"CODE"
000172r 1               
000172r 1               ;
000172r 1               ; unsigned char *screen_ptr = OS.savmsc;
000172r 1               ;
000172r 1  A5 59        	lda     $0058+1
000174r 1  8D rr rr     	sta     L00B8+1
000177r 1  A5 58        	lda     $0058
000179r 1  8D rr rr     	sta     L00B8
00017Cr 1               ;
00017Cr 1               ; for (index1 = 0; index1 < SCREEN_SIZE_Y; ++index1)
00017Cr 1               ;
00017Cr 1  A9 00        	lda     #$00
00017Er 1  85 rr        	sta     _index1
000180r 1  A5 rr        L00F4:	lda     _index1
000182r 1  C9 18        	cmp     #$18
000184r 1  B0 34        	bcs     L00F5
000186r 1               ;
000186r 1               ; screen_line_lookup[index1] = &screen_ptr[index1 * SCREEN_SIZE_X];
000186r 1               ;
000186r 1  A2 00        	ldx     #$00
000188r 1  A5 rr        	lda     _index1
00018Ar 1  0A           	asl     a
00018Br 1  90 02        	bcc     L00F3
00018Dr 1  E8           	inx
00018Er 1  18           	clc
00018Fr 1  69 rr        L00F3:	adc     #<(_screen_line_lookup)
000191r 1  A8           	tay
000192r 1  8A           	txa
000193r 1  69 rr        	adc     #>(_screen_line_lookup)
000195r 1  AA           	tax
000196r 1  98           	tya
000197r 1  20 rr rr     	jsr     pushax
00019Ar 1  AD rr rr     	lda     L00B8
00019Dr 1  AE rr rr     	ldx     L00B8+1
0001A0r 1  20 rr rr     	jsr     pushax
0001A3r 1  A5 rr        	lda     _index1
0001A5r 1  20 rr rr     	jsr     pusha0
0001A8r 1  A9 28        	lda     #$28
0001AAr 1  20 rr rr     	jsr     tosumula0
0001ADr 1  20 rr rr     	jsr     tosaddax
0001B0r 1  A0 00        	ldy     #$00
0001B2r 1  20 rr rr     	jsr     staxspidx
0001B5r 1               ;
0001B5r 1               ; for (index1 = 0; index1 < SCREEN_SIZE_Y; ++index1)
0001B5r 1               ;
0001B5r 1  E6 rr        	inc     _index1
0001B7r 1  4C rr rr     	jmp     L00F4
0001BAr 1               ;
0001BAr 1               ; for (index1 = 0; index1 < MAX_LOOKUP_VALUE; ++index1)
0001BAr 1               ;
0001BAr 1  A9 00        L00F5:	lda     #$00
0001BCr 1  85 rr        	sta     _index1
0001BEr 1  A5 rr        L00F6:	lda     _index1
0001C0r 1  C9 64        	cmp     #$64
0001C2r 1  B0 43        	bcs     L00C8
0001C4r 1               ;
0001C4r 1               ; div_10_lookup[index1] = index1/10 + FIRST_DIGIT_CHAR;
0001C4r 1               ;
0001C4r 1  A9 rr        	lda     #<(_div_10_lookup)
0001C6r 1  A2 rr        	ldx     #>(_div_10_lookup)
0001C8r 1  18           	clc
0001C9r 1  65 rr        	adc     _index1
0001CBr 1  90 01        	bcc     L00D1
0001CDr 1  E8           	inx
0001CEr 1  20 rr rr     L00D1:	jsr     pushax
0001D1r 1  A5 rr        	lda     _index1
0001D3r 1  20 rr rr     	jsr     pusha0
0001D6r 1  A9 0A        	lda     #$0A
0001D8r 1  20 rr rr     	jsr     tosudiva0
0001DBr 1  18           	clc
0001DCr 1  69 10        	adc     #$10
0001DEr 1  A0 00        	ldy     #$00
0001E0r 1  20 rr rr     	jsr     staspidx
0001E3r 1               ;
0001E3r 1               ; mod_10_lookup[index1] = index1%10 + FIRST_DIGIT_CHAR;
0001E3r 1               ;
0001E3r 1  A9 rr        	lda     #<(_mod_10_lookup)
0001E5r 1  A2 rr        	ldx     #>(_mod_10_lookup)
0001E7r 1  18           	clc
0001E8r 1  65 rr        	adc     _index1
0001EAr 1  90 01        	bcc     L00D6
0001ECr 1  E8           	inx
0001EDr 1  20 rr rr     L00D6:	jsr     pushax
0001F0r 1  A5 rr        	lda     _index1
0001F2r 1  20 rr rr     	jsr     pusha0
0001F5r 1  A9 0A        	lda     #$0A
0001F7r 1  20 rr rr     	jsr     tosumoda0
0001FAr 1  18           	clc
0001FBr 1  69 10        	adc     #$10
0001FDr 1  A0 00        	ldy     #$00
0001FFr 1  20 rr rr     	jsr     staspidx
000202r 1               ;
000202r 1               ; for (index1 = 0; index1 < MAX_LOOKUP_VALUE; ++index1)
000202r 1               ;
000202r 1  E6 rr        	inc     _index1
000204r 1  4C rr rr     	jmp     L00F6
000207r 1               ;
000207r 1               ; }
000207r 1               ;
000207r 1  60           L00C8:	rts
000208r 1               
000208r 1               .endproc
000208r 1               
000208r 1               ; ---------------------------------------------------------------
000208r 1               ; void __near__ main (void)
000208r 1               ; ---------------------------------------------------------------
000208r 1               
000208r 1               .segment	"CODE"
000208r 1               
000208r 1               .proc	_main: near
000208r 1               
000208r 1               .segment	"BSS"
00017Br 1               
00017Br 1               L00DA:
00017Br 1  00           	.res	1,$00
00017Cr 1               
00017Cr 1               .segment	"CODE"
000208r 1               
000208r 1               ;
000208r 1               ; init_lookup_tables();
000208r 1               ;
000208r 1  20 rr rr     	jsr     _init_lookup_tables
00020Br 1               ;
00020Br 1               ; set_entities();
00020Br 1               ;
00020Br 1  20 rr rr     	jsr     _set_entities
00020Er 1               ;
00020Er 1               ; start_benchmark();
00020Er 1               ;
00020Er 1  20 rr rr     	jsr     _start_benchmark
000211r 1               ;
000211r 1               ; for (times = 0; times < 100; ++times)
000211r 1               ;
000211r 1  A9 00        	lda     #$00
000213r 1  8D rr rr     	sta     L00DA
000216r 1  AD rr rr     L00F8:	lda     L00DA
000219r 1  C9 64        	cmp     #$64
00021Br 1  B0 09        	bcs     L00DF
00021Dr 1               ;
00021Dr 1               ; one_frame();
00021Dr 1               ;
00021Dr 1  20 rr rr     	jsr     _one_frame
000220r 1               ;
000220r 1               ; for (times = 0; times < 100; ++times)
000220r 1               ;
000220r 1  EE rr rr     	inc     L00DA
000223r 1  4C rr rr     	jmp     L00F8
000226r 1               ;
000226r 1               ; end_benchmark();
000226r 1               ;
000226r 1  20 rr rr     L00DF:	jsr     _end_benchmark
000229r 1               ;
000229r 1               ; for(;;);
000229r 1               ;
000229r 1  4C rr rr     L00EA:	jmp     L00EA
00022Cr 1               
00022Cr 1               .endproc
00022Cr 1               
00022Cr 1               
