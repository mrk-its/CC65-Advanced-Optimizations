ca65 V2.18 - Ubuntu 2.18-1
Main file   : game.s
Current file: game.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_start_benchmark
000000r 1               	.export		_ticks
000000r 1               	.export		_end_benchmark
000000r 1               	.export		_place_enemy
000000r 1               	.export		_set_entities
000000r 1               	.export		_get_entity_tile
000000r 1               	.export		_draw_entity
000000r 1               	.export		_damage_enemy
000000r 1               	.export		_one_frame
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0042:
000000r 1  25 75 20 74  	.byte	$25,$75,$20,$74,$69,$63,$6B,$73,$00
000004r 1  69 63 6B 73  
000008r 1  00           
000009r 1               
000009r 1               .segment	"BSS"
000000r 1               
000000r 1               _ticks:
000000r 1  00 00        	.res	2,$00
000002r 1               
000002r 1               ; ---------------------------------------------------------------
000002r 1               ; void __near__ start_benchmark (void)
000002r 1               ; ---------------------------------------------------------------
000002r 1               
000002r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_start_benchmark: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; asm("SEI");
000000r 1               ;
000000r 1  78           	sei
000001r 1               ;
000001r 1               ; asm("lda $14");
000001r 1               ;
000001r 1  A5 14        	lda     $14
000003r 1               ;
000003r 1               ; asm("cmp $14");
000003r 1               ;
000003r 1  C5 14        L0025:	cmp     $14
000005r 1               ;
000005r 1               ; asm("beq %g", wvb);
000005r 1               ;
000005r 1  F0 FC        	beq     L0025
000007r 1               ;
000007r 1               ; asm("lda #0");
000007r 1               ;
000007r 1  A9 00        	lda     #0
000009r 1               ;
000009r 1               ; asm("sta $13");
000009r 1               ;
000009r 1  85 13        	sta     $13
00000Br 1               ;
00000Br 1               ; asm("sta $14");
00000Br 1               ;
00000Br 1  85 14        	sta     $14
00000Dr 1               ;
00000Dr 1               ; asm("CLI");
00000Dr 1               ;
00000Dr 1  58           	cli
00000Er 1               ;
00000Er 1               ; }
00000Er 1               ;
00000Er 1  60           	rts
00000Fr 1               
00000Fr 1               .endproc
00000Fr 1               
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               ; void __near__ end_benchmark (void)
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               .proc	_end_benchmark: near
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               ;
00000Fr 1               ; asm("SEI");
00000Fr 1               ;
00000Fr 1  78           	sei
000010r 1               ;
000010r 1               ; asm("lda $14");
000010r 1               ;
000010r 1  A5 14        	lda     $14
000012r 1               ;
000012r 1               ; asm("sta %v", ticks);
000012r 1               ;
000012r 1  8D rr rr     	sta     _ticks
000015r 1               ;
000015r 1               ; asm("lda $13");
000015r 1               ;
000015r 1  A5 13        	lda     $13
000017r 1               ;
000017r 1               ; asm("sta %v+1", ticks);
000017r 1               ;
000017r 1  8D rr rr     	sta     _ticks+1
00001Ar 1               ;
00001Ar 1               ; asm("CLI");
00001Ar 1               ;
00001Ar 1  58           	cli
00001Br 1               ;
00001Br 1               ; printf("%u ticks", ticks);
00001Br 1               ;
00001Br 1  A9 rr        	lda     #<(L0042)
00001Dr 1  A2 rr        	ldx     #>(L0042)
00001Fr 1  20 rr rr     	jsr     pushax
000022r 1  AD rr rr     	lda     _ticks
000025r 1  AE rr rr     	ldx     _ticks+1
000028r 1  20 rr rr     	jsr     pushax
00002Br 1  A0 04        	ldy     #$04
00002Dr 1  4C rr rr     	jmp     _printf
000030r 1               
000030r 1               .endproc
000030r 1               
000030r 1               ; ---------------------------------------------------------------
000030r 1               ; void __near__ place_enemy (__near__ struct s_entity *, unsigned char, unsigned char)
000030r 1               ; ---------------------------------------------------------------
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               .proc	_place_enemy: near
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               ;
000030r 1               ; {
000030r 1               ;
000030r 1  20 rr rr     	jsr     pusha
000033r 1               ;
000033r 1               ; e_ptr->x = x;
000033r 1               ;
000033r 1  A0 03        	ldy     #$03
000035r 1  B1 rr        	lda     (sp),y
000037r 1  85 rr        	sta     ptr1+1
000039r 1  88           	dey
00003Ar 1  B1 rr        	lda     (sp),y
00003Cr 1  85 rr        	sta     ptr1
00003Er 1  88           	dey
00003Fr 1  B1 rr        	lda     (sp),y
000041r 1  88           	dey
000042r 1  91 rr        	sta     (ptr1),y
000044r 1               ;
000044r 1               ; e_ptr->y = y;
000044r 1               ;
000044r 1  A0 03        	ldy     #$03
000046r 1  B1 rr        	lda     (sp),y
000048r 1  85 rr        	sta     ptr1+1
00004Ar 1  88           	dey
00004Br 1  B1 rr        	lda     (sp),y
00004Dr 1  85 rr        	sta     ptr1
00004Fr 1  A0 00        	ldy     #$00
000051r 1  B1 rr        	lda     (sp),y
000053r 1  C8           	iny
000054r 1  91 rr        	sta     (ptr1),y
000056r 1               ;
000056r 1               ; }
000056r 1               ;
000056r 1  4C rr rr     	jmp     incsp4
000059r 1               
000059r 1               .endproc
000059r 1               
000059r 1               ; ---------------------------------------------------------------
000059r 1               ; void __near__ set_entities (__near__ struct s_game_state *)
000059r 1               ; ---------------------------------------------------------------
000059r 1               
000059r 1               .segment	"CODE"
000059r 1               
000059r 1               .proc	_set_entities: near
000059r 1               
000059r 1               .segment	"BSS"
000002r 1               
000002r 1               L004C:
000002r 1  00           	.res	1,$00
000003r 1               L004D:
000003r 1  00 00        	.res	2,$00
000005r 1               
000005r 1               .segment	"CODE"
000059r 1               
000059r 1               ;
000059r 1               ; {
000059r 1               ;
000059r 1  20 rr rr     	jsr     pushax
00005Cr 1               ;
00005Cr 1               ; for (index = 0; index<_countof(game_state->enemies); index++)
00005Cr 1               ;
00005Cr 1  A9 00        	lda     #$00
00005Er 1  8D rr rr     	sta     L004C
000061r 1  AD rr rr     L00C2:	lda     L004C
000064r 1  C9 1E        	cmp     #$1E
000066r 1  B0 6B        	bcs     L004F
000068r 1               ;
000068r 1               ; e = &game_state->enemies[index];
000068r 1               ;
000068r 1  20 rr rr     	jsr     pushw0sp
00006Br 1  A2 00        	ldx     #$00
00006Dr 1  AD rr rr     	lda     L004C
000070r 1  20 rr rr     	jsr     mulax5
000073r 1  20 rr rr     	jsr     tosaddax
000076r 1  8D rr rr     	sta     L004D
000079r 1  8E rr rr     	stx     L004D+1
00007Cr 1               ;
00007Cr 1               ; place_enemy( e, (index*5) % SCREEN_SIZE_X, index / 2 + 9);
00007Cr 1               ;
00007Cr 1  20 rr rr     	jsr     decsp3
00007Fr 1  AD rr rr     	lda     L004D
000082r 1  A0 01        	ldy     #$01
000084r 1  91 rr        	sta     (sp),y
000086r 1  C8           	iny
000087r 1  AD rr rr     	lda     L004D+1
00008Ar 1  91 rr        	sta     (sp),y
00008Cr 1  A2 00        	ldx     #$00
00008Er 1  AD rr rr     	lda     L004C
000091r 1  20 rr rr     	jsr     mulax5
000094r 1  20 rr rr     	jsr     pushax
000097r 1  A9 28        	lda     #$28
000099r 1  20 rr rr     	jsr     tosumoda0
00009Cr 1  A0 00        	ldy     #$00
00009Er 1  91 rr        	sta     (sp),y
0000A0r 1  AD rr rr     	lda     L004C
0000A3r 1  4A           	lsr     a
0000A4r 1  18           	clc
0000A5r 1  69 09        	adc     #$09
0000A7r 1  20 rr rr     	jsr     _place_enemy
0000AAr 1               ;
0000AAr 1               ; e->hp = 99;
0000AAr 1               ;
0000AAr 1  AD rr rr     	lda     L004D+1
0000ADr 1  85 rr        	sta     ptr1+1
0000AFr 1  AD rr rr     	lda     L004D
0000B2r 1  85 rr        	sta     ptr1
0000B4r 1  A9 63        	lda     #$63
0000B6r 1  A0 02        	ldy     #$02
0000B8r 1  91 rr        	sta     (ptr1),y
0000BAr 1               ;
0000BAr 1               ; e->type = ENTITY_ENEMY;
0000BAr 1               ;
0000BAr 1  AD rr rr     	lda     L004D+1
0000BDr 1  85 rr        	sta     ptr1+1
0000BFr 1  AD rr rr     	lda     L004D
0000C2r 1  85 rr        	sta     ptr1
0000C4r 1  98           	tya
0000C5r 1  C8           	iny
0000C6r 1  91 rr        	sta     (ptr1),y
0000C8r 1  C8           	iny
0000C9r 1  A9 00        	lda     #$00
0000CBr 1  91 rr        	sta     (ptr1),y
0000CDr 1               ;
0000CDr 1               ; for (index = 0; index<_countof(game_state->enemies); index++)
0000CDr 1               ;
0000CDr 1  EE rr rr     	inc     L004C
0000D0r 1  4C rr rr     	jmp     L00C2
0000D3r 1               ;
0000D3r 1               ; game_state->player.entity.hp = 99;
0000D3r 1               ;
0000D3r 1  A0 01        L004F:	ldy     #$01
0000D5r 1  B1 rr        	lda     (sp),y
0000D7r 1  85 rr        	sta     ptr1+1
0000D9r 1  88           	dey
0000DAr 1  B1 rr        	lda     (sp),y
0000DCr 1  85 rr        	sta     ptr1
0000DEr 1  A9 63        	lda     #$63
0000E0r 1  A0 98        	ldy     #$98
0000E2r 1  91 rr        	sta     (ptr1),y
0000E4r 1               ;
0000E4r 1               ; game_state->player.entity.x = SCREEN_SIZE_X/2;
0000E4r 1               ;
0000E4r 1  A0 01        	ldy     #$01
0000E6r 1  B1 rr        	lda     (sp),y
0000E8r 1  85 rr        	sta     ptr1+1
0000EAr 1  88           	dey
0000EBr 1  B1 rr        	lda     (sp),y
0000EDr 1  85 rr        	sta     ptr1
0000EFr 1  A9 14        	lda     #$14
0000F1r 1  A0 96        	ldy     #$96
0000F3r 1  91 rr        	sta     (ptr1),y
0000F5r 1               ;
0000F5r 1               ; game_state->player.entity.type = ENTITY_PLAYER;
0000F5r 1               ;
0000F5r 1  A0 01        	ldy     #$01
0000F7r 1  B1 rr        	lda     (sp),y
0000F9r 1  85 rr        	sta     ptr1+1
0000FBr 1  88           	dey
0000FCr 1  B1 rr        	lda     (sp),y
0000FEr 1  85 rr        	sta     ptr1
000100r 1  A9 01        	lda     #$01
000102r 1  A0 99        	ldy     #$99
000104r 1  91 rr        	sta     (ptr1),y
000106r 1  C8           	iny
000107r 1  A9 00        	lda     #$00
000109r 1  91 rr        	sta     (ptr1),y
00010Br 1               ;
00010Br 1               ; };
00010Br 1               ;
00010Br 1  4C rr rr     	jmp     incsp2
00010Er 1               
00010Er 1               .endproc
00010Er 1               
00010Er 1               ; ---------------------------------------------------------------
00010Er 1               ; unsigned char __near__ get_entity_tile (int)
00010Er 1               ; ---------------------------------------------------------------
00010Er 1               
00010Er 1               .segment	"CODE"
00010Er 1               
00010Er 1               .proc	_get_entity_tile: near
00010Er 1               
00010Er 1               .segment	"CODE"
00010Er 1               
00010Er 1               ;
00010Er 1               ; {
00010Er 1               ;
00010Er 1  20 rr rr     	jsr     pushax
000111r 1               ;
000111r 1               ; switch(type)
000111r 1               ;
000111r 1  A0 01        	ldy     #$01
000113r 1  B1 rr        	lda     (sp),y
000115r 1  AA           	tax
000116r 1  88           	dey
000117r 1  B1 rr        	lda     (sp),y
000119r 1               ;
000119r 1               ; }
000119r 1               ;
000119r 1  E0 00        	cpx     #$00
00011Br 1  D0 15        	bne     L0070
00011Dr 1  C9 01        	cmp     #$01
00011Fr 1  F0 07        	beq     L00C3
000121r 1  C9 02        	cmp     #$02
000123r 1  F0 08        	beq     L00C4
000125r 1  4C rr rr     	jmp     L00C5
000128r 1               ;
000128r 1               ; return 'p';
000128r 1               ;
000128r 1  A9 70        L00C3:	lda     #$70
00012Ar 1  4C rr rr     	jmp     incsp2
00012Dr 1               ;
00012Dr 1               ; return 'e';
00012Dr 1               ;
00012Dr 1  A9 65        L00C4:	lda     #$65
00012Fr 1  4C rr rr     	jmp     incsp2
000132r 1               ;
000132r 1               ; return 'x';
000132r 1               ;
000132r 1  A2 00        L0070:	ldx     #$00
000134r 1  A9 78        L00C5:	lda     #$78
000136r 1               ;
000136r 1               ; }
000136r 1               ;
000136r 1  4C rr rr     	jmp     incsp2
000139r 1               
000139r 1               .endproc
000139r 1               
000139r 1               ; ---------------------------------------------------------------
000139r 1               ; void __near__ draw_entity (__near__ unsigned char *, __near__ struct s_entity *)
000139r 1               ; ---------------------------------------------------------------
000139r 1               
000139r 1               .segment	"CODE"
000139r 1               
000139r 1               .proc	_draw_entity: near
000139r 1               
000139r 1               .segment	"BSS"
000005r 1               
000005r 1               L0079:
000005r 1  00           	.res	1,$00
000006r 1               L007B:
000006r 1  00 00        	.res	2,$00
000008r 1               
000008r 1               .segment	"CODE"
000139r 1               
000139r 1               ;
000139r 1               ; {
000139r 1               ;
000139r 1  20 rr rr     	jsr     pushax
00013Cr 1               ;
00013Cr 1               ; const unsigned char FIRST_DIGIT_CHAR = 0x10;
00013Cr 1               ;
00013Cr 1  A9 10        	lda     #$10
00013Er 1  8D rr rr     	sta     L0079
000141r 1               ;
000141r 1               ; unsigned char *draw_ptr = &screen_ptr[e_ptr->y * SCREEN_SIZE_X + e_ptr->x];
000141r 1               ;
000141r 1  A0 05        	ldy     #$05
000143r 1  20 rr rr     	jsr     pushwysp
000146r 1  A0 03        	ldy     #$03
000148r 1  B1 rr        	lda     (sp),y
00014Ar 1  85 rr        	sta     ptr1+1
00014Cr 1  88           	dey
00014Dr 1  B1 rr        	lda     (sp),y
00014Fr 1  85 rr        	sta     ptr1
000151r 1  88           	dey
000152r 1  B1 rr        	lda     (ptr1),y
000154r 1  20 rr rr     	jsr     pusha0
000157r 1  A9 28        	lda     #$28
000159r 1  20 rr rr     	jsr     tosumula0
00015Cr 1  20 rr rr     	jsr     pushax
00015Fr 1  A0 05        	ldy     #$05
000161r 1  B1 rr        	lda     (sp),y
000163r 1  85 rr        	sta     ptr1+1
000165r 1  88           	dey
000166r 1  B1 rr        	lda     (sp),y
000168r 1  85 rr        	sta     ptr1
00016Ar 1  A2 00        	ldx     #$00
00016Cr 1  A1 rr        	lda     (ptr1,x)
00016Er 1  20 rr rr     	jsr     tosadda0
000171r 1  20 rr rr     	jsr     tosaddax
000174r 1  8D rr rr     	sta     L007B
000177r 1  8E rr rr     	stx     L007B+1
00017Ar 1               ;
00017Ar 1               ; *draw_ptr = get_entity_tile(e_ptr->type);
00017Ar 1               ;
00017Ar 1  20 rr rr     	jsr     pushax
00017Dr 1  A0 03        	ldy     #$03
00017Fr 1  B1 rr        	lda     (sp),y
000181r 1  85 rr        	sta     ptr1+1
000183r 1  88           	dey
000184r 1  B1 rr        	lda     (sp),y
000186r 1  85 rr        	sta     ptr1
000188r 1  A0 04        	ldy     #$04
00018Ar 1  B1 rr        	lda     (ptr1),y
00018Cr 1  AA           	tax
00018Dr 1  88           	dey
00018Er 1  B1 rr        	lda     (ptr1),y
000190r 1  20 rr rr     	jsr     _get_entity_tile
000193r 1  A0 00        	ldy     #$00
000195r 1  20 rr rr     	jsr     staspidx
000198r 1               ;
000198r 1               ; *(++draw_ptr) = e_ptr->hp / 10 + FIRST_DIGIT_CHAR;
000198r 1               ;
000198r 1  EE rr rr     	inc     L007B
00019Br 1  D0 03        	bne     L0083
00019Dr 1  EE rr rr     	inc     L007B+1
0001A0r 1  AD rr rr     L0083:	lda     L007B
0001A3r 1  AE rr rr     	ldx     L007B+1
0001A6r 1  20 rr rr     	jsr     pushax
0001A9r 1  A0 03        	ldy     #$03
0001ABr 1  B1 rr        	lda     (sp),y
0001ADr 1  85 rr        	sta     ptr1+1
0001AFr 1  88           	dey
0001B0r 1  B1 rr        	lda     (sp),y
0001B2r 1  85 rr        	sta     ptr1
0001B4r 1  B1 rr        	lda     (ptr1),y
0001B6r 1  20 rr rr     	jsr     pusha0
0001B9r 1  A9 0A        	lda     #$0A
0001BBr 1  20 rr rr     	jsr     tosudiva0
0001BEr 1  18           	clc
0001BFr 1  6D rr rr     	adc     L0079
0001C2r 1  A0 00        	ldy     #$00
0001C4r 1  20 rr rr     	jsr     staspidx
0001C7r 1               ;
0001C7r 1               ; *(++draw_ptr) = e_ptr->hp % 10 + FIRST_DIGIT_CHAR;
0001C7r 1               ;
0001C7r 1  EE rr rr     	inc     L007B
0001CAr 1  D0 03        	bne     L0087
0001CCr 1  EE rr rr     	inc     L007B+1
0001CFr 1  AD rr rr     L0087:	lda     L007B
0001D2r 1  AE rr rr     	ldx     L007B+1
0001D5r 1  20 rr rr     	jsr     pushax
0001D8r 1  A0 03        	ldy     #$03
0001DAr 1  B1 rr        	lda     (sp),y
0001DCr 1  85 rr        	sta     ptr1+1
0001DEr 1  88           	dey
0001DFr 1  B1 rr        	lda     (sp),y
0001E1r 1  85 rr        	sta     ptr1
0001E3r 1  B1 rr        	lda     (ptr1),y
0001E5r 1  20 rr rr     	jsr     pusha0
0001E8r 1  A9 0A        	lda     #$0A
0001EAr 1  20 rr rr     	jsr     tosumoda0
0001EDr 1  18           	clc
0001EEr 1  6D rr rr     	adc     L0079
0001F1r 1  A0 00        	ldy     #$00
0001F3r 1  20 rr rr     	jsr     staspidx
0001F6r 1               ;
0001F6r 1               ; };
0001F6r 1               ;
0001F6r 1  4C rr rr     	jmp     incsp4
0001F9r 1               
0001F9r 1               .endproc
0001F9r 1               
0001F9r 1               ; ---------------------------------------------------------------
0001F9r 1               ; void __near__ damage_enemy (__near__ struct s_entity *)
0001F9r 1               ; ---------------------------------------------------------------
0001F9r 1               
0001F9r 1               .segment	"CODE"
0001F9r 1               
0001F9r 1               .proc	_damage_enemy: near
0001F9r 1               
0001F9r 1               .segment	"CODE"
0001F9r 1               
0001F9r 1               ;
0001F9r 1               ; {
0001F9r 1               ;
0001F9r 1  20 rr rr     	jsr     pushax
0001FCr 1               ;
0001FCr 1               ; if (e_ptr->hp > 0)
0001FCr 1               ;
0001FCr 1  A0 01        	ldy     #$01
0001FEr 1  B1 rr        	lda     (sp),y
000200r 1  85 rr        	sta     ptr1+1
000202r 1  88           	dey
000203r 1  B1 rr        	lda     (sp),y
000205r 1  85 rr        	sta     ptr1
000207r 1  A0 02        	ldy     #$02
000209r 1  B1 rr        	lda     (ptr1),y
00020Br 1  F0 18        	beq     L008A
00020Dr 1               ;
00020Dr 1               ; e_ptr->hp--;
00020Dr 1               ;
00020Dr 1  88           	dey
00020Er 1  B1 rr        	lda     (sp),y
000210r 1  AA           	tax
000211r 1  88           	dey
000212r 1  B1 rr        	lda     (sp),y
000214r 1  20 rr rr     	jsr     pushax
000217r 1  85 rr        	sta     ptr1
000219r 1  86 rr        	stx     ptr1+1
00021Br 1  A0 02        	ldy     #$02
00021Dr 1  B1 rr        	lda     (ptr1),y
00021Fr 1  38           	sec
000220r 1  E9 01        	sbc     #$01
000222r 1  20 rr rr     	jsr     staspidx
000225r 1               ;
000225r 1               ; }
000225r 1               ;
000225r 1  4C rr rr     L008A:	jmp     incsp2
000228r 1               
000228r 1               .endproc
000228r 1               
000228r 1               ; ---------------------------------------------------------------
000228r 1               ; void __near__ one_frame (__near__ struct s_game_state *, __near__ unsigned char *)
000228r 1               ; ---------------------------------------------------------------
000228r 1               
000228r 1               .segment	"CODE"
000228r 1               
000228r 1               .proc	_one_frame: near
000228r 1               
000228r 1               .segment	"BSS"
000008r 1               
000008r 1               L008E:
000008r 1  00           	.res	1,$00
000009r 1               L008F:
000009r 1  00 00        	.res	2,$00
00000Br 1               
00000Br 1               .segment	"CODE"
000228r 1               
000228r 1               ;
000228r 1               ; {
000228r 1               ;
000228r 1  20 rr rr     	jsr     pushax
00022Br 1               ;
00022Br 1               ; for (index = 0; index < _countof(game_state->enemies); index++)
00022Br 1               ;
00022Br 1  A9 00        	lda     #$00
00022Dr 1  8D rr rr     	sta     L008E
000230r 1  AD rr rr     L00C8:	lda     L008E
000233r 1  C9 1E        	cmp     #$1E
000235r 1  B0 2B        	bcs     L0091
000237r 1               ;
000237r 1               ; e = &game_state->enemies[index];
000237r 1               ;
000237r 1  A0 05        	ldy     #$05
000239r 1  20 rr rr     	jsr     pushwysp
00023Cr 1  A2 00        	ldx     #$00
00023Er 1  AD rr rr     	lda     L008E
000241r 1  20 rr rr     	jsr     mulax5
000244r 1  20 rr rr     	jsr     tosaddax
000247r 1  8D rr rr     	sta     L008F
00024Ar 1  8E rr rr     	stx     L008F+1
00024Dr 1               ;
00024Dr 1               ; damage_enemy(e);
00024Dr 1               ;
00024Dr 1  20 rr rr     	jsr     _damage_enemy
000250r 1               ;
000250r 1               ; draw_entity(screen_ptr, e);
000250r 1               ;
000250r 1  20 rr rr     	jsr     pushw0sp
000253r 1  AD rr rr     	lda     L008F
000256r 1  AE rr rr     	ldx     L008F+1
000259r 1  20 rr rr     	jsr     _draw_entity
00025Cr 1               ;
00025Cr 1               ; for (index = 0; index < _countof(game_state->enemies); index++)
00025Cr 1               ;
00025Cr 1  EE rr rr     	inc     L008E
00025Fr 1  4C rr rr     	jmp     L00C8
000262r 1               ;
000262r 1               ; draw_entity(screen_ptr, &game_state->player.entity);
000262r 1               ;
000262r 1  20 rr rr     L0091:	jsr     pushw0sp
000265r 1  A0 05        	ldy     #$05
000267r 1  B1 rr        	lda     (sp),y
000269r 1  AA           	tax
00026Ar 1  88           	dey
00026Br 1  B1 rr        	lda     (sp),y
00026Dr 1  18           	clc
00026Er 1  69 96        	adc     #$96
000270r 1  90 01        	bcc     L00A7
000272r 1  E8           	inx
000273r 1  20 rr rr     L00A7:	jsr     _draw_entity
000276r 1               ;
000276r 1               ; }
000276r 1               ;
000276r 1  4C rr rr     	jmp     incsp4
000279r 1               
000279r 1               .endproc
000279r 1               
000279r 1               ; ---------------------------------------------------------------
000279r 1               ; void __near__ main (void)
000279r 1               ; ---------------------------------------------------------------
000279r 1               
000279r 1               .segment	"CODE"
000279r 1               
000279r 1               .proc	_main: near
000279r 1               
000279r 1               .segment	"BSS"
00000Br 1               
00000Br 1               L00A9:
00000Br 1  00 00        	.res	2,$00
00000Dr 1               L00AA:
00000Dr 1  00           	.res	1,$00
00000Er 1               L00AB:
00000Er 1  00 00 00 00  	.res	156,$00
000012r 1  00 00 00 00  
000016r 1  00 00 00 00  
0000AAr 1               
0000AAr 1               .segment	"CODE"
000279r 1               
000279r 1               ;
000279r 1               ; screen_ptr = OS.savmsc;
000279r 1               ;
000279r 1  A5 59        	lda     $0058+1
00027Br 1  8D rr rr     	sta     L00A9+1
00027Er 1  A5 58        	lda     $0058
000280r 1  8D rr rr     	sta     L00A9
000283r 1               ;
000283r 1               ; set_entities(&game_state);
000283r 1               ;
000283r 1  A9 rr        	lda     #<(L00AB)
000285r 1  A2 rr        	ldx     #>(L00AB)
000287r 1  20 rr rr     	jsr     _set_entities
00028Ar 1               ;
00028Ar 1               ; start_benchmark();
00028Ar 1               ;
00028Ar 1  20 rr rr     	jsr     _start_benchmark
00028Dr 1               ;
00028Dr 1               ; for (times = 0; times < 100; ++times)
00028Dr 1               ;
00028Dr 1  A9 00        	lda     #$00
00028Fr 1  8D rr rr     	sta     L00AA
000292r 1  AD rr rr     L00CA:	lda     L00AA
000295r 1  C9 64        	cmp     #$64
000297r 1  B0 16        	bcs     L00B3
000299r 1               ;
000299r 1               ; one_frame(&game_state, screen_ptr);
000299r 1               ;
000299r 1  A9 rr        	lda     #<(L00AB)
00029Br 1  A2 rr        	ldx     #>(L00AB)
00029Dr 1  20 rr rr     	jsr     pushax
0002A0r 1  AD rr rr     	lda     L00A9
0002A3r 1  AE rr rr     	ldx     L00A9+1
0002A6r 1  20 rr rr     	jsr     _one_frame
0002A9r 1               ;
0002A9r 1               ; for (times = 0; times < 100; ++times)
0002A9r 1               ;
0002A9r 1  EE rr rr     	inc     L00AA
0002ACr 1  4C rr rr     	jmp     L00CA
0002AFr 1               ;
0002AFr 1               ; end_benchmark();
0002AFr 1               ;
0002AFr 1  20 rr rr     L00B3:	jsr     _end_benchmark
0002B2r 1               ;
0002B2r 1               ; for(;;);
0002B2r 1               ;
0002B2r 1  4C rr rr     L00C0:	jmp     L00C0
0002B5r 1               
0002B5r 1               .endproc
0002B5r 1               
0002B5r 1               
