ca65 V2.18 - Ubuntu 2.18-1
Main file   : game.s
Current file: game.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_start_benchmark
000000r 1               	.export		_ticks
000000r 1               	.export		_end_benchmark
000000r 1               	.exportzp	_index1
000000r 1               	.export		_screen_ptr
000000r 1               	.export		_game_state
000000r 1               	.export		_place_enemy_index
000000r 1               	.export		_place_enemy
000000r 1               	.export		_set_entities
000000r 1               	.export		_get_entity_tile
000000r 1               	.export		_draw_entity_index
000000r 1               	.export		_draw_entity
000000r 1               	.export		_damage_enemy_index
000000r 1               	.export		_damage_enemy
000000r 1               	.export		_one_frame
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               .segment	"ZEROPAGE"
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0042:
000000r 1  25 75 20 74  	.byte	$25,$75,$20,$74,$69,$63,$6B,$73,$00
000004r 1  69 63 6B 73  
000008r 1  00           
000009r 1               
000009r 1               .segment	"BSS"
000000r 1               
000000r 1               _ticks:
000000r 1  00 00        	.res	2,$00
000002r 1               .segment	"ZEROPAGE"
000000r 1               _index1:
000000r 1  00           	.res	1,$00
000001r 1               .segment	"BSS"
000002r 1               _screen_ptr:
000002r 1  00 00        	.res	2,$00
000004r 1               _game_state:
000004r 1  00 00 00 00  	.res	125,$00
000008r 1  00 00 00 00  
00000Cr 1  00 00 00 00  
000081r 1               _place_enemy_index:
000081r 1  00           	.res	1,$00
000082r 1               _draw_entity_index:
000082r 1  00           	.res	1,$00
000083r 1               _damage_enemy_index:
000083r 1  00           	.res	1,$00
000084r 1               
000084r 1               ; ---------------------------------------------------------------
000084r 1               ; void __near__ start_benchmark (void)
000084r 1               ; ---------------------------------------------------------------
000084r 1               
000084r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_start_benchmark: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; asm("SEI");
000000r 1               ;
000000r 1  78           	sei
000001r 1               ;
000001r 1               ; asm("lda $14");
000001r 1               ;
000001r 1  A5 14        	lda     $14
000003r 1               ;
000003r 1               ; asm("cmp $14");
000003r 1               ;
000003r 1  C5 14        L0025:	cmp     $14
000005r 1               ;
000005r 1               ; asm("beq %g", wvb);
000005r 1               ;
000005r 1  F0 FC        	beq     L0025
000007r 1               ;
000007r 1               ; asm("lda #0");
000007r 1               ;
000007r 1  A9 00        	lda     #0
000009r 1               ;
000009r 1               ; asm("sta $13");
000009r 1               ;
000009r 1  85 13        	sta     $13
00000Br 1               ;
00000Br 1               ; asm("sta $14");
00000Br 1               ;
00000Br 1  85 14        	sta     $14
00000Dr 1               ;
00000Dr 1               ; asm("CLI");
00000Dr 1               ;
00000Dr 1  58           	cli
00000Er 1               ;
00000Er 1               ; }
00000Er 1               ;
00000Er 1  60           	rts
00000Fr 1               
00000Fr 1               .endproc
00000Fr 1               
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               ; void __near__ end_benchmark (void)
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               .proc	_end_benchmark: near
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               ;
00000Fr 1               ; asm("SEI");
00000Fr 1               ;
00000Fr 1  78           	sei
000010r 1               ;
000010r 1               ; asm("lda $14");
000010r 1               ;
000010r 1  A5 14        	lda     $14
000012r 1               ;
000012r 1               ; asm("sta %v", ticks);
000012r 1               ;
000012r 1  8D rr rr     	sta     _ticks
000015r 1               ;
000015r 1               ; asm("lda $13");
000015r 1               ;
000015r 1  A5 13        	lda     $13
000017r 1               ;
000017r 1               ; asm("sta %v+1", ticks);
000017r 1               ;
000017r 1  8D rr rr     	sta     _ticks+1
00001Ar 1               ;
00001Ar 1               ; asm("CLI");
00001Ar 1               ;
00001Ar 1  58           	cli
00001Br 1               ;
00001Br 1               ; printf("%u ticks", ticks);
00001Br 1               ;
00001Br 1  A9 rr        	lda     #<(L0042)
00001Dr 1  A2 rr        	ldx     #>(L0042)
00001Fr 1  20 rr rr     	jsr     pushax
000022r 1  AD rr rr     	lda     _ticks
000025r 1  AE rr rr     	ldx     _ticks+1
000028r 1  20 rr rr     	jsr     pushax
00002Br 1  A0 04        	ldy     #$04
00002Dr 1  4C rr rr     	jmp     _printf
000030r 1               
000030r 1               .endproc
000030r 1               
000030r 1               ; ---------------------------------------------------------------
000030r 1               ; void __near__ place_enemy (unsigned char, unsigned char)
000030r 1               ; ---------------------------------------------------------------
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               .proc	_place_enemy: near
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               ;
000030r 1               ; {
000030r 1               ;
000030r 1  20 rr rr     	jsr     pusha
000033r 1               ;
000033r 1               ; game_state.entities.x[place_enemy_index] = x;
000033r 1               ;
000033r 1  A0 01        	ldy     #$01
000035r 1  B1 rr        	lda     (sp),y
000037r 1  AC rr rr     	ldy     _place_enemy_index
00003Ar 1  99 rr rr     	sta     _game_state,y
00003Dr 1               ;
00003Dr 1               ; game_state.entities.y[place_enemy_index] = y;
00003Dr 1               ;
00003Dr 1  A0 00        	ldy     #$00
00003Fr 1  B1 rr        	lda     (sp),y
000041r 1  AC rr rr     	ldy     _place_enemy_index
000044r 1  99 rr rr     	sta     _game_state+31,y
000047r 1               ;
000047r 1               ; }
000047r 1               ;
000047r 1  4C rr rr     	jmp     incsp2
00004Ar 1               
00004Ar 1               .endproc
00004Ar 1               
00004Ar 1               ; ---------------------------------------------------------------
00004Ar 1               ; void __near__ set_entities (void)
00004Ar 1               ; ---------------------------------------------------------------
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1               .proc	_set_entities: near
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1               ;
00004Ar 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
00004Ar 1               ;
00004Ar 1  A9 00        	lda     #$00
00004Cr 1  85 rr        	sta     _index1
00004Er 1  A5 rr        L00D5:	lda     _index1
000050r 1  C9 1E        	cmp     #$1E
000052r 1  B0 31        	bcs     L00D6
000054r 1               ;
000054r 1               ; place_enemy_index = index1;
000054r 1               ;
000054r 1  8D rr rr     	sta     _place_enemy_index
000057r 1               ;
000057r 1               ; place_enemy((index1*5) % SCREEN_SIZE_X, index1 / 2 + 9);
000057r 1               ;
000057r 1  A2 00        	ldx     #$00
000059r 1  A5 rr        	lda     _index1
00005Br 1  20 rr rr     	jsr     mulax5
00005Er 1  20 rr rr     	jsr     pushax
000061r 1  A9 28        	lda     #$28
000063r 1  20 rr rr     	jsr     tosumoda0
000066r 1  20 rr rr     	jsr     pusha
000069r 1  A5 rr        	lda     _index1
00006Br 1  4A           	lsr     a
00006Cr 1  18           	clc
00006Dr 1  69 09        	adc     #$09
00006Fr 1  20 rr rr     	jsr     _place_enemy
000072r 1               ;
000072r 1               ; game_state.entities.hp[index1] = 99;
000072r 1               ;
000072r 1  A4 rr        	ldy     _index1
000074r 1  A9 63        	lda     #$63
000076r 1  99 rr rr     	sta     _game_state+62,y
000079r 1               ;
000079r 1               ; game_state.entities.type[index1] = ENTITY_ENEMY;
000079r 1               ;
000079r 1  A4 rr        	ldy     _index1
00007Br 1  A9 02        	lda     #$02
00007Dr 1  99 rr rr     	sta     _game_state+93,y
000080r 1               ;
000080r 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
000080r 1               ;
000080r 1  E6 rr        	inc     _index1
000082r 1  4C rr rr     	jmp     L00D5
000085r 1               ;
000085r 1               ; game_state.entities.hp[PLAYER_INDEX] = 99;
000085r 1               ;
000085r 1  A9 63        L00D6:	lda     #$63
000087r 1  8D rr rr     	sta     _game_state+92
00008Ar 1               ;
00008Ar 1               ; game_state.entities.x[PLAYER_INDEX] = SCREEN_SIZE_X/2;
00008Ar 1               ;
00008Ar 1  A9 14        	lda     #$14
00008Cr 1  8D rr rr     	sta     _game_state+30
00008Fr 1               ;
00008Fr 1               ; game_state.entities.type[PLAYER_INDEX] = ENTITY_PLAYER;
00008Fr 1               ;
00008Fr 1  A9 01        	lda     #$01
000091r 1  8D rr rr     	sta     _game_state+123
000094r 1               ;
000094r 1               ; };
000094r 1               ;
000094r 1  60           	rts
000095r 1               
000095r 1               .endproc
000095r 1               
000095r 1               ; ---------------------------------------------------------------
000095r 1               ; unsigned char __near__ get_entity_tile (unsigned char)
000095r 1               ; ---------------------------------------------------------------
000095r 1               
000095r 1               .segment	"CODE"
000095r 1               
000095r 1               .proc	_get_entity_tile: near
000095r 1               
000095r 1               .segment	"CODE"
000095r 1               
000095r 1               ;
000095r 1               ; {
000095r 1               ;
000095r 1  20 rr rr     	jsr     pusha
000098r 1               ;
000098r 1               ; switch(type)
000098r 1               ;
000098r 1  A2 00        	ldx     #$00
00009Ar 1  A1 rr        	lda     (sp,x)
00009Cr 1               ;
00009Cr 1               ; }
00009Cr 1               ;
00009Cr 1  C9 01        	cmp     #$01
00009Er 1  F0 07        	beq     L00D7
0000A0r 1  C9 02        	cmp     #$02
0000A2r 1  F0 08        	beq     L00D8
0000A4r 1  4C rr rr     	jmp     L00D9
0000A7r 1               ;
0000A7r 1               ; return 'p';
0000A7r 1               ;
0000A7r 1  A9 70        L00D7:	lda     #$70
0000A9r 1  4C rr rr     	jmp     incsp1
0000ACr 1               ;
0000ACr 1               ; return 'e';
0000ACr 1               ;
0000ACr 1  A9 65        L00D8:	lda     #$65
0000AEr 1  4C rr rr     	jmp     incsp1
0000B1r 1               ;
0000B1r 1               ; return 'x';
0000B1r 1               ;
0000B1r 1  A9 78        L00D9:	lda     #$78
0000B3r 1               ;
0000B3r 1               ; }
0000B3r 1               ;
0000B3r 1  4C rr rr     	jmp     incsp1
0000B6r 1               
0000B6r 1               .endproc
0000B6r 1               
0000B6r 1               ; ---------------------------------------------------------------
0000B6r 1               ; void __near__ draw_entity (void)
0000B6r 1               ; ---------------------------------------------------------------
0000B6r 1               
0000B6r 1               .segment	"CODE"
0000B6r 1               
0000B6r 1               .proc	_draw_entity: near
0000B6r 1               
0000B6r 1               .segment	"BSS"
000084r 1               
000084r 1               L008B:
000084r 1  00           	.res	1,$00
000085r 1               L008D:
000085r 1  00 00        	.res	2,$00
000087r 1               
000087r 1               .segment	"CODE"
0000B6r 1               
0000B6r 1               ;
0000B6r 1               ; const unsigned char FIRST_DIGIT_CHAR = 0x10;
0000B6r 1               ;
0000B6r 1  A9 10        	lda     #$10
0000B8r 1  8D rr rr     	sta     L008B
0000BBr 1               ;
0000BBr 1               ; unsigned char *draw_ptr = &screen_ptr[game_state.entities.y[draw_entity_index] * SCREEN_SIZE_X + game_state.entities.x[draw_entity_index]];
0000BBr 1               ;
0000BBr 1  AD rr rr     	lda     _screen_ptr
0000BEr 1  AE rr rr     	ldx     _screen_ptr+1
0000C1r 1  20 rr rr     	jsr     pushax
0000C4r 1  AC rr rr     	ldy     _draw_entity_index
0000C7r 1  B9 rr rr     	lda     _game_state+31,y
0000CAr 1  20 rr rr     	jsr     pusha0
0000CDr 1  A9 28        	lda     #$28
0000CFr 1  20 rr rr     	jsr     tosumula0
0000D2r 1  85 rr        	sta     ptr1
0000D4r 1  86 rr        	stx     ptr1+1
0000D6r 1  AC rr rr     	ldy     _draw_entity_index
0000D9r 1  B9 rr rr     	lda     _game_state,y
0000DCr 1  18           	clc
0000DDr 1  65 rr        	adc     ptr1
0000DFr 1  A6 rr        	ldx     ptr1+1
0000E1r 1  90 01        	bcc     L00DC
0000E3r 1  E8           	inx
0000E4r 1  20 rr rr     L00DC:	jsr     tosaddax
0000E7r 1  8D rr rr     	sta     L008D
0000EAr 1  8E rr rr     	stx     L008D+1
0000EDr 1               ;
0000EDr 1               ; *draw_ptr = get_entity_tile(game_state.entities.type[draw_entity_index]);
0000EDr 1               ;
0000EDr 1  20 rr rr     	jsr     pushax
0000F0r 1  AC rr rr     	ldy     _draw_entity_index
0000F3r 1  B9 rr rr     	lda     _game_state+93,y
0000F6r 1  20 rr rr     	jsr     _get_entity_tile
0000F9r 1  A0 00        	ldy     #$00
0000FBr 1  20 rr rr     	jsr     staspidx
0000FEr 1               ;
0000FEr 1               ; *(++draw_ptr) = game_state.entities.hp[draw_entity_index] / 10 + FIRST_DIGIT_CHAR;
0000FEr 1               ;
0000FEr 1  EE rr rr     	inc     L008D
000101r 1  D0 03        	bne     L009B
000103r 1  EE rr rr     	inc     L008D+1
000106r 1  AD rr rr     L009B:	lda     L008D
000109r 1  AE rr rr     	ldx     L008D+1
00010Cr 1  20 rr rr     	jsr     pushax
00010Fr 1  AC rr rr     	ldy     _draw_entity_index
000112r 1  B9 rr rr     	lda     _game_state+62,y
000115r 1  20 rr rr     	jsr     pusha0
000118r 1  A9 0A        	lda     #$0A
00011Ar 1  20 rr rr     	jsr     tosudiva0
00011Dr 1  18           	clc
00011Er 1  6D rr rr     	adc     L008B
000121r 1  A0 00        	ldy     #$00
000123r 1  20 rr rr     	jsr     staspidx
000126r 1               ;
000126r 1               ; *(++draw_ptr) = game_state.entities.hp[draw_entity_index] % 10 + FIRST_DIGIT_CHAR;
000126r 1               ;
000126r 1  EE rr rr     	inc     L008D
000129r 1  D0 03        	bne     L00A1
00012Br 1  EE rr rr     	inc     L008D+1
00012Er 1  AD rr rr     L00A1:	lda     L008D
000131r 1  AE rr rr     	ldx     L008D+1
000134r 1  20 rr rr     	jsr     pushax
000137r 1  AC rr rr     	ldy     _draw_entity_index
00013Ar 1  B9 rr rr     	lda     _game_state+62,y
00013Dr 1  20 rr rr     	jsr     pusha0
000140r 1  A9 0A        	lda     #$0A
000142r 1  20 rr rr     	jsr     tosumoda0
000145r 1  18           	clc
000146r 1  6D rr rr     	adc     L008B
000149r 1  A0 00        	ldy     #$00
00014Br 1  4C rr rr     	jmp     staspidx
00014Er 1               
00014Er 1               .endproc
00014Er 1               
00014Er 1               ; ---------------------------------------------------------------
00014Er 1               ; void __near__ damage_enemy (void)
00014Er 1               ; ---------------------------------------------------------------
00014Er 1               
00014Er 1               .segment	"CODE"
00014Er 1               
00014Er 1               .proc	_damage_enemy: near
00014Er 1               
00014Er 1               .segment	"CODE"
00014Er 1               
00014Er 1               ;
00014Er 1               ; if (game_state.entities.hp[damage_enemy_index] > 0)
00014Er 1               ;
00014Er 1  AC rr rr     	ldy     _damage_enemy_index
000151r 1  B9 rr rr     	lda     _game_state+62,y
000154r 1  F0 1C        	beq     L00A6
000156r 1               ;
000156r 1               ; game_state.entities.hp[damage_enemy_index]--;
000156r 1               ;
000156r 1  A9 rr        	lda     #<(_game_state+62)
000158r 1  A2 rr        	ldx     #>(_game_state+62)
00015Ar 1  18           	clc
00015Br 1  6D rr rr     	adc     _damage_enemy_index
00015Er 1  90 01        	bcc     L00AC
000160r 1  E8           	inx
000161r 1  20 rr rr     L00AC:	jsr     pushax
000164r 1  85 rr        	sta     ptr1
000166r 1  86 rr        	stx     ptr1+1
000168r 1  A0 00        	ldy     #$00
00016Ar 1  B1 rr        	lda     (ptr1),y
00016Cr 1  38           	sec
00016Dr 1  E9 01        	sbc     #$01
00016Fr 1  4C rr rr     	jmp     staspidx
000172r 1               ;
000172r 1               ; }
000172r 1               ;
000172r 1  60           L00A6:	rts
000173r 1               
000173r 1               .endproc
000173r 1               
000173r 1               ; ---------------------------------------------------------------
000173r 1               ; void __near__ one_frame (void)
000173r 1               ; ---------------------------------------------------------------
000173r 1               
000173r 1               .segment	"CODE"
000173r 1               
000173r 1               .proc	_one_frame: near
000173r 1               
000173r 1               .segment	"CODE"
000173r 1               
000173r 1               ;
000173r 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
000173r 1               ;
000173r 1  A9 00        	lda     #$00
000175r 1  85 rr        	sta     _index1
000177r 1  A5 rr        L00DD:	lda     _index1
000179r 1  C9 1E        	cmp     #$1E
00017Br 1  B0 13        	bcs     L00DE
00017Dr 1               ;
00017Dr 1               ; damage_enemy_index = index1;
00017Dr 1               ;
00017Dr 1  8D rr rr     	sta     _damage_enemy_index
000180r 1               ;
000180r 1               ; damage_enemy();
000180r 1               ;
000180r 1  20 rr rr     	jsr     _damage_enemy
000183r 1               ;
000183r 1               ; draw_entity_index = index1;
000183r 1               ;
000183r 1  A5 rr        	lda     _index1
000185r 1  8D rr rr     	sta     _draw_entity_index
000188r 1               ;
000188r 1               ; draw_entity();
000188r 1               ;
000188r 1  20 rr rr     	jsr     _draw_entity
00018Br 1               ;
00018Br 1               ; for (index1 = 0; index1 < NO_ENEMIES; index1++)
00018Br 1               ;
00018Br 1  E6 rr        	inc     _index1
00018Dr 1  4C rr rr     	jmp     L00DD
000190r 1               ;
000190r 1               ; draw_entity_index = PLAYER_INDEX;
000190r 1               ;
000190r 1  A9 1E        L00DE:	lda     #$1E
000192r 1  8D rr rr     	sta     _draw_entity_index
000195r 1               ;
000195r 1               ; draw_entity();
000195r 1               ;
000195r 1  4C rr rr     	jmp     _draw_entity
000198r 1               
000198r 1               .endproc
000198r 1               
000198r 1               ; ---------------------------------------------------------------
000198r 1               ; void __near__ main (void)
000198r 1               ; ---------------------------------------------------------------
000198r 1               
000198r 1               .segment	"CODE"
000198r 1               
000198r 1               .proc	_main: near
000198r 1               
000198r 1               .segment	"BSS"
000087r 1               
000087r 1               L00C1:
000087r 1  00           	.res	1,$00
000088r 1               
000088r 1               .segment	"CODE"
000198r 1               
000198r 1               ;
000198r 1               ; screen_ptr = OS.savmsc;
000198r 1               ;
000198r 1  A5 59        	lda     $0058+1
00019Ar 1  8D rr rr     	sta     _screen_ptr+1
00019Dr 1  A5 58        	lda     $0058
00019Fr 1  8D rr rr     	sta     _screen_ptr
0001A2r 1               ;
0001A2r 1               ; set_entities();
0001A2r 1               ;
0001A2r 1  20 rr rr     	jsr     _set_entities
0001A5r 1               ;
0001A5r 1               ; start_benchmark();
0001A5r 1               ;
0001A5r 1  20 rr rr     	jsr     _start_benchmark
0001A8r 1               ;
0001A8r 1               ; for (times = 0; times < 100; ++times)
0001A8r 1               ;
0001A8r 1  A9 00        	lda     #$00
0001AAr 1  8D rr rr     	sta     L00C1
0001ADr 1  AD rr rr     L00E0:	lda     L00C1
0001B0r 1  C9 64        	cmp     #$64
0001B2r 1  B0 09        	bcs     L00C8
0001B4r 1               ;
0001B4r 1               ; one_frame();
0001B4r 1               ;
0001B4r 1  20 rr rr     	jsr     _one_frame
0001B7r 1               ;
0001B7r 1               ; for (times = 0; times < 100; ++times)
0001B7r 1               ;
0001B7r 1  EE rr rr     	inc     L00C1
0001BAr 1  4C rr rr     	jmp     L00E0
0001BDr 1               ;
0001BDr 1               ; end_benchmark();
0001BDr 1               ;
0001BDr 1  20 rr rr     L00C8:	jsr     _end_benchmark
0001C0r 1               ;
0001C0r 1               ; for(;;);
0001C0r 1               ;
0001C0r 1  4C rr rr     L00D3:	jmp     L00D3
0001C3r 1               
0001C3r 1               .endproc
0001C3r 1               
0001C3r 1               
