ca65 V2.18 - Ubuntu 2.18-1
Main file   : game.s
Current file: game.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.export		_start_benchmark
000000r 1               	.export		_ticks
000000r 1               	.export		_end_benchmark
000000r 1               	.export		_screen_ptr
000000r 1               	.export		_game_state
000000r 1               	.export		_place_enemy_index
000000r 1               	.export		_place_enemy
000000r 1               	.export		_set_entities
000000r 1               	.export		_get_entity_tile
000000r 1               	.export		_draw_entity_index
000000r 1               	.export		_draw_entity
000000r 1               	.export		_damage_enemy_index
000000r 1               	.export		_damage_enemy
000000r 1               	.export		_one_frame
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0042:
000000r 1  25 75 20 74  	.byte	$25,$75,$20,$74,$69,$63,$6B,$73,$00
000004r 1  69 63 6B 73  
000008r 1  00           
000009r 1               
000009r 1               .segment	"BSS"
000000r 1               
000000r 1               _ticks:
000000r 1  00 00        	.res	2,$00
000002r 1               _screen_ptr:
000002r 1  00 00        	.res	2,$00
000004r 1               _game_state:
000004r 1  00 00 00 00  	.res	156,$00
000008r 1  00 00 00 00  
00000Cr 1  00 00 00 00  
0000A0r 1               _place_enemy_index:
0000A0r 1  00           	.res	1,$00
0000A1r 1               _draw_entity_index:
0000A1r 1  00           	.res	1,$00
0000A2r 1               _damage_enemy_index:
0000A2r 1  00           	.res	1,$00
0000A3r 1               
0000A3r 1               ; ---------------------------------------------------------------
0000A3r 1               ; void __near__ start_benchmark (void)
0000A3r 1               ; ---------------------------------------------------------------
0000A3r 1               
0000A3r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_start_benchmark: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; asm("SEI");
000000r 1               ;
000000r 1  78           	sei
000001r 1               ;
000001r 1               ; asm("lda $14");
000001r 1               ;
000001r 1  A5 14        	lda     $14
000003r 1               ;
000003r 1               ; asm("cmp $14");
000003r 1               ;
000003r 1  C5 14        L0025:	cmp     $14
000005r 1               ;
000005r 1               ; asm("beq %g", wvb);
000005r 1               ;
000005r 1  F0 FC        	beq     L0025
000007r 1               ;
000007r 1               ; asm("lda #0");
000007r 1               ;
000007r 1  A9 00        	lda     #0
000009r 1               ;
000009r 1               ; asm("sta $13");
000009r 1               ;
000009r 1  85 13        	sta     $13
00000Br 1               ;
00000Br 1               ; asm("sta $14");
00000Br 1               ;
00000Br 1  85 14        	sta     $14
00000Dr 1               ;
00000Dr 1               ; asm("CLI");
00000Dr 1               ;
00000Dr 1  58           	cli
00000Er 1               ;
00000Er 1               ; }
00000Er 1               ;
00000Er 1  60           	rts
00000Fr 1               
00000Fr 1               .endproc
00000Fr 1               
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               ; void __near__ end_benchmark (void)
00000Fr 1               ; ---------------------------------------------------------------
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               .proc	_end_benchmark: near
00000Fr 1               
00000Fr 1               .segment	"CODE"
00000Fr 1               
00000Fr 1               ;
00000Fr 1               ; asm("SEI");
00000Fr 1               ;
00000Fr 1  78           	sei
000010r 1               ;
000010r 1               ; asm("lda $14");
000010r 1               ;
000010r 1  A5 14        	lda     $14
000012r 1               ;
000012r 1               ; asm("sta %v", ticks);
000012r 1               ;
000012r 1  8D rr rr     	sta     _ticks
000015r 1               ;
000015r 1               ; asm("lda $13");
000015r 1               ;
000015r 1  A5 13        	lda     $13
000017r 1               ;
000017r 1               ; asm("sta %v+1", ticks);
000017r 1               ;
000017r 1  8D rr rr     	sta     _ticks+1
00001Ar 1               ;
00001Ar 1               ; asm("CLI");
00001Ar 1               ;
00001Ar 1  58           	cli
00001Br 1               ;
00001Br 1               ; printf("%u ticks", ticks);
00001Br 1               ;
00001Br 1  A9 rr        	lda     #<(L0042)
00001Dr 1  A2 rr        	ldx     #>(L0042)
00001Fr 1  20 rr rr     	jsr     pushax
000022r 1  AD rr rr     	lda     _ticks
000025r 1  AE rr rr     	ldx     _ticks+1
000028r 1  20 rr rr     	jsr     pushax
00002Br 1  A0 04        	ldy     #$04
00002Dr 1  4C rr rr     	jmp     _printf
000030r 1               
000030r 1               .endproc
000030r 1               
000030r 1               ; ---------------------------------------------------------------
000030r 1               ; void __near__ place_enemy (unsigned char, unsigned char)
000030r 1               ; ---------------------------------------------------------------
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               .proc	_place_enemy: near
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               ;
000030r 1               ; {
000030r 1               ;
000030r 1  20 rr rr     	jsr     pusha
000033r 1               ;
000033r 1               ; game_state.entities.x[place_enemy_index] = x;
000033r 1               ;
000033r 1  A0 01        	ldy     #$01
000035r 1  B1 rr        	lda     (sp),y
000037r 1  AC rr rr     	ldy     _place_enemy_index
00003Ar 1  99 rr rr     	sta     _game_state,y
00003Dr 1               ;
00003Dr 1               ; game_state.entities.y[place_enemy_index] = y;
00003Dr 1               ;
00003Dr 1  A0 00        	ldy     #$00
00003Fr 1  B1 rr        	lda     (sp),y
000041r 1  AC rr rr     	ldy     _place_enemy_index
000044r 1  99 rr rr     	sta     _game_state+31,y
000047r 1               ;
000047r 1               ; }
000047r 1               ;
000047r 1  4C rr rr     	jmp     incsp2
00004Ar 1               
00004Ar 1               .endproc
00004Ar 1               
00004Ar 1               ; ---------------------------------------------------------------
00004Ar 1               ; void __near__ set_entities (void)
00004Ar 1               ; ---------------------------------------------------------------
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1               .proc	_set_entities: near
00004Ar 1               
00004Ar 1               .segment	"BSS"
0000A3r 1               
0000A3r 1               L0057:
0000A3r 1  00           	.res	1,$00
0000A4r 1               
0000A4r 1               .segment	"CODE"
00004Ar 1               
00004Ar 1               ;
00004Ar 1               ; for (index = 0; index < NO_ENEMIES; index++)
00004Ar 1               ;
00004Ar 1  A9 00        	lda     #$00
00004Cr 1  8D rr rr     	sta     L0057
00004Fr 1  AD rr rr     L00D2:	lda     L0057
000052r 1  C9 1E        	cmp     #$1E
000054r 1  B0 4C        	bcs     L00D3
000056r 1               ;
000056r 1               ; place_enemy_index = index;
000056r 1               ;
000056r 1  8D rr rr     	sta     _place_enemy_index
000059r 1               ;
000059r 1               ; place_enemy((index*5) % SCREEN_SIZE_X, index / 2 + 9);
000059r 1               ;
000059r 1  A2 00        	ldx     #$00
00005Br 1  AD rr rr     	lda     L0057
00005Er 1  20 rr rr     	jsr     mulax5
000061r 1  20 rr rr     	jsr     pushax
000064r 1  A9 28        	lda     #$28
000066r 1  20 rr rr     	jsr     tosumoda0
000069r 1  20 rr rr     	jsr     pusha
00006Cr 1  AD rr rr     	lda     L0057
00006Fr 1  4A           	lsr     a
000070r 1  18           	clc
000071r 1  69 09        	adc     #$09
000073r 1  20 rr rr     	jsr     _place_enemy
000076r 1               ;
000076r 1               ; game_state.entities.hp[index] = 99;
000076r 1               ;
000076r 1  AC rr rr     	ldy     L0057
000079r 1  A9 63        	lda     #$63
00007Br 1  99 rr rr     	sta     _game_state+62,y
00007Er 1               ;
00007Er 1               ; game_state.entities.type[index] = ENTITY_ENEMY;
00007Er 1               ;
00007Er 1  A2 00        	ldx     #$00
000080r 1  AD rr rr     	lda     L0057
000083r 1  0A           	asl     a
000084r 1  90 02        	bcc     L00D1
000086r 1  E8           	inx
000087r 1  18           	clc
000088r 1  69 rr        L00D1:	adc     #<(_game_state+93)
00008Ar 1  85 rr        	sta     ptr1
00008Cr 1  8A           	txa
00008Dr 1  69 rr        	adc     #>(_game_state+93)
00008Fr 1  85 rr        	sta     ptr1+1
000091r 1  A9 02        	lda     #$02
000093r 1  A0 00        	ldy     #$00
000095r 1  91 rr        	sta     (ptr1),y
000097r 1  C8           	iny
000098r 1  A9 00        	lda     #$00
00009Ar 1  91 rr        	sta     (ptr1),y
00009Cr 1               ;
00009Cr 1               ; for (index = 0; index < NO_ENEMIES; index++)
00009Cr 1               ;
00009Cr 1  EE rr rr     	inc     L0057
00009Fr 1  4C rr rr     	jmp     L00D2
0000A2r 1               ;
0000A2r 1               ; game_state.entities.hp[PLAYER_INDEX] = 99;
0000A2r 1               ;
0000A2r 1  A9 63        L00D3:	lda     #$63
0000A4r 1  8D rr rr     	sta     _game_state+92
0000A7r 1               ;
0000A7r 1               ; game_state.entities.x[PLAYER_INDEX] = SCREEN_SIZE_X/2;
0000A7r 1               ;
0000A7r 1  A9 14        	lda     #$14
0000A9r 1  8D rr rr     	sta     _game_state+30
0000ACr 1               ;
0000ACr 1               ; game_state.entities.type[PLAYER_INDEX] = ENTITY_PLAYER;
0000ACr 1               ;
0000ACr 1  A2 00        	ldx     #$00
0000AEr 1  A9 01        	lda     #$01
0000B0r 1  8D rr rr     	sta     _game_state+153
0000B3r 1  8E rr rr     	stx     _game_state+153+1
0000B6r 1               ;
0000B6r 1               ; };
0000B6r 1               ;
0000B6r 1  60           	rts
0000B7r 1               
0000B7r 1               .endproc
0000B7r 1               
0000B7r 1               ; ---------------------------------------------------------------
0000B7r 1               ; unsigned char __near__ get_entity_tile (int)
0000B7r 1               ; ---------------------------------------------------------------
0000B7r 1               
0000B7r 1               .segment	"CODE"
0000B7r 1               
0000B7r 1               .proc	_get_entity_tile: near
0000B7r 1               
0000B7r 1               .segment	"CODE"
0000B7r 1               
0000B7r 1               ;
0000B7r 1               ; {
0000B7r 1               ;
0000B7r 1  20 rr rr     	jsr     pushax
0000BAr 1               ;
0000BAr 1               ; switch(type)
0000BAr 1               ;
0000BAr 1  A0 01        	ldy     #$01
0000BCr 1  B1 rr        	lda     (sp),y
0000BEr 1  AA           	tax
0000BFr 1  88           	dey
0000C0r 1  B1 rr        	lda     (sp),y
0000C2r 1               ;
0000C2r 1               ; }
0000C2r 1               ;
0000C2r 1  E0 00        	cpx     #$00
0000C4r 1  D0 15        	bne     L007D
0000C6r 1  C9 01        	cmp     #$01
0000C8r 1  F0 07        	beq     L00D4
0000CAr 1  C9 02        	cmp     #$02
0000CCr 1  F0 08        	beq     L00D5
0000CEr 1  4C rr rr     	jmp     L00D6
0000D1r 1               ;
0000D1r 1               ; return 'p';
0000D1r 1               ;
0000D1r 1  A9 70        L00D4:	lda     #$70
0000D3r 1  4C rr rr     	jmp     incsp2
0000D6r 1               ;
0000D6r 1               ; return 'e';
0000D6r 1               ;
0000D6r 1  A9 65        L00D5:	lda     #$65
0000D8r 1  4C rr rr     	jmp     incsp2
0000DBr 1               ;
0000DBr 1               ; return 'x';
0000DBr 1               ;
0000DBr 1  A2 00        L007D:	ldx     #$00
0000DDr 1  A9 78        L00D6:	lda     #$78
0000DFr 1               ;
0000DFr 1               ; }
0000DFr 1               ;
0000DFr 1  4C rr rr     	jmp     incsp2
0000E2r 1               
0000E2r 1               .endproc
0000E2r 1               
0000E2r 1               ; ---------------------------------------------------------------
0000E2r 1               ; void __near__ draw_entity (void)
0000E2r 1               ; ---------------------------------------------------------------
0000E2r 1               
0000E2r 1               .segment	"CODE"
0000E2r 1               
0000E2r 1               .proc	_draw_entity: near
0000E2r 1               
0000E2r 1               .segment	"BSS"
0000A4r 1               
0000A4r 1               L0086:
0000A4r 1  00           	.res	1,$00
0000A5r 1               L0088:
0000A5r 1  00 00        	.res	2,$00
0000A7r 1               
0000A7r 1               .segment	"CODE"
0000E2r 1               
0000E2r 1               ;
0000E2r 1               ; const unsigned char FIRST_DIGIT_CHAR = 0x10;
0000E2r 1               ;
0000E2r 1  A9 10        	lda     #$10
0000E4r 1  8D rr rr     	sta     L0086
0000E7r 1               ;
0000E7r 1               ; unsigned char *draw_ptr = &screen_ptr[game_state.entities.y[draw_entity_index] * SCREEN_SIZE_X + game_state.entities.x[draw_entity_index]];
0000E7r 1               ;
0000E7r 1  AD rr rr     	lda     _screen_ptr
0000EAr 1  AE rr rr     	ldx     _screen_ptr+1
0000EDr 1  20 rr rr     	jsr     pushax
0000F0r 1  AC rr rr     	ldy     _draw_entity_index
0000F3r 1  B9 rr rr     	lda     _game_state+31,y
0000F6r 1  20 rr rr     	jsr     pusha0
0000F9r 1  A9 28        	lda     #$28
0000FBr 1  20 rr rr     	jsr     tosumula0
0000FEr 1  85 rr        	sta     ptr1
000100r 1  86 rr        	stx     ptr1+1
000102r 1  AC rr rr     	ldy     _draw_entity_index
000105r 1  B9 rr rr     	lda     _game_state,y
000108r 1  18           	clc
000109r 1  65 rr        	adc     ptr1
00010Br 1  A6 rr        	ldx     ptr1+1
00010Dr 1  90 01        	bcc     L00DA
00010Fr 1  E8           	inx
000110r 1  20 rr rr     L00DA:	jsr     tosaddax
000113r 1  8D rr rr     	sta     L0088
000116r 1  8E rr rr     	stx     L0088+1
000119r 1               ;
000119r 1               ; *draw_ptr = get_entity_tile(game_state.entities.type[draw_entity_index]);
000119r 1               ;
000119r 1  20 rr rr     	jsr     pushax
00011Cr 1  A2 00        	ldx     #$00
00011Er 1  AD rr rr     	lda     _draw_entity_index
000121r 1  0A           	asl     a
000122r 1  90 02        	bcc     L00DB
000124r 1  E8           	inx
000125r 1  18           	clc
000126r 1  69 rr        L00DB:	adc     #<(_game_state+93)
000128r 1  85 rr        	sta     ptr1
00012Ar 1  8A           	txa
00012Br 1  69 rr        	adc     #>(_game_state+93)
00012Dr 1  85 rr        	sta     ptr1+1
00012Fr 1  A0 01        	ldy     #$01
000131r 1  B1 rr        	lda     (ptr1),y
000133r 1  AA           	tax
000134r 1  88           	dey
000135r 1  B1 rr        	lda     (ptr1),y
000137r 1  20 rr rr     	jsr     _get_entity_tile
00013Ar 1  A0 00        	ldy     #$00
00013Cr 1  20 rr rr     	jsr     staspidx
00013Fr 1               ;
00013Fr 1               ; *(++draw_ptr) = game_state.entities.hp[draw_entity_index] / 10 + FIRST_DIGIT_CHAR;
00013Fr 1               ;
00013Fr 1  EE rr rr     	inc     L0088
000142r 1  D0 03        	bne     L0095
000144r 1  EE rr rr     	inc     L0088+1
000147r 1  AD rr rr     L0095:	lda     L0088
00014Ar 1  AE rr rr     	ldx     L0088+1
00014Dr 1  20 rr rr     	jsr     pushax
000150r 1  AC rr rr     	ldy     _draw_entity_index
000153r 1  B9 rr rr     	lda     _game_state+62,y
000156r 1  20 rr rr     	jsr     pusha0
000159r 1  A9 0A        	lda     #$0A
00015Br 1  20 rr rr     	jsr     tosudiva0
00015Er 1  18           	clc
00015Fr 1  6D rr rr     	adc     L0086
000162r 1  A0 00        	ldy     #$00
000164r 1  20 rr rr     	jsr     staspidx
000167r 1               ;
000167r 1               ; *(++draw_ptr) = game_state.entities.hp[draw_entity_index] % 10 + FIRST_DIGIT_CHAR;
000167r 1               ;
000167r 1  EE rr rr     	inc     L0088
00016Ar 1  D0 03        	bne     L009B
00016Cr 1  EE rr rr     	inc     L0088+1
00016Fr 1  AD rr rr     L009B:	lda     L0088
000172r 1  AE rr rr     	ldx     L0088+1
000175r 1  20 rr rr     	jsr     pushax
000178r 1  AC rr rr     	ldy     _draw_entity_index
00017Br 1  B9 rr rr     	lda     _game_state+62,y
00017Er 1  20 rr rr     	jsr     pusha0
000181r 1  A9 0A        	lda     #$0A
000183r 1  20 rr rr     	jsr     tosumoda0
000186r 1  18           	clc
000187r 1  6D rr rr     	adc     L0086
00018Ar 1  A0 00        	ldy     #$00
00018Cr 1  4C rr rr     	jmp     staspidx
00018Fr 1               
00018Fr 1               .endproc
00018Fr 1               
00018Fr 1               ; ---------------------------------------------------------------
00018Fr 1               ; void __near__ damage_enemy (void)
00018Fr 1               ; ---------------------------------------------------------------
00018Fr 1               
00018Fr 1               .segment	"CODE"
00018Fr 1               
00018Fr 1               .proc	_damage_enemy: near
00018Fr 1               
00018Fr 1               .segment	"CODE"
00018Fr 1               
00018Fr 1               ;
00018Fr 1               ; if (game_state.entities.hp[damage_enemy_index] > 0)
00018Fr 1               ;
00018Fr 1  AC rr rr     	ldy     _damage_enemy_index
000192r 1  B9 rr rr     	lda     _game_state+62,y
000195r 1  F0 1C        	beq     L00A0
000197r 1               ;
000197r 1               ; game_state.entities.hp[damage_enemy_index]--;
000197r 1               ;
000197r 1  A9 rr        	lda     #<(_game_state+62)
000199r 1  A2 rr        	ldx     #>(_game_state+62)
00019Br 1  18           	clc
00019Cr 1  6D rr rr     	adc     _damage_enemy_index
00019Fr 1  90 01        	bcc     L00A6
0001A1r 1  E8           	inx
0001A2r 1  20 rr rr     L00A6:	jsr     pushax
0001A5r 1  85 rr        	sta     ptr1
0001A7r 1  86 rr        	stx     ptr1+1
0001A9r 1  A0 00        	ldy     #$00
0001ABr 1  B1 rr        	lda     (ptr1),y
0001ADr 1  38           	sec
0001AEr 1  E9 01        	sbc     #$01
0001B0r 1  4C rr rr     	jmp     staspidx
0001B3r 1               ;
0001B3r 1               ; }
0001B3r 1               ;
0001B3r 1  60           L00A0:	rts
0001B4r 1               
0001B4r 1               .endproc
0001B4r 1               
0001B4r 1               ; ---------------------------------------------------------------
0001B4r 1               ; void __near__ one_frame (void)
0001B4r 1               ; ---------------------------------------------------------------
0001B4r 1               
0001B4r 1               .segment	"CODE"
0001B4r 1               
0001B4r 1               .proc	_one_frame: near
0001B4r 1               
0001B4r 1               .segment	"BSS"
0000A7r 1               
0000A7r 1               L00A8:
0000A7r 1  00           	.res	1,$00
0000A8r 1               
0000A8r 1               .segment	"CODE"
0001B4r 1               
0001B4r 1               ;
0001B4r 1               ; for (index = 0; index < NO_ENEMIES; index++)
0001B4r 1               ;
0001B4r 1  A9 00        	lda     #$00
0001B6r 1  8D rr rr     	sta     L00A8
0001B9r 1  AD rr rr     L00DC:	lda     L00A8
0001BCr 1  C9 1E        	cmp     #$1E
0001BEr 1  B0 15        	bcs     L00DD
0001C0r 1               ;
0001C0r 1               ; damage_enemy_index = index;
0001C0r 1               ;
0001C0r 1  8D rr rr     	sta     _damage_enemy_index
0001C3r 1               ;
0001C3r 1               ; damage_enemy();
0001C3r 1               ;
0001C3r 1  20 rr rr     	jsr     _damage_enemy
0001C6r 1               ;
0001C6r 1               ; draw_entity_index = index;
0001C6r 1               ;
0001C6r 1  AD rr rr     	lda     L00A8
0001C9r 1  8D rr rr     	sta     _draw_entity_index
0001CCr 1               ;
0001CCr 1               ; draw_entity();
0001CCr 1               ;
0001CCr 1  20 rr rr     	jsr     _draw_entity
0001CFr 1               ;
0001CFr 1               ; for (index = 0; index < NO_ENEMIES; index++)
0001CFr 1               ;
0001CFr 1  EE rr rr     	inc     L00A8
0001D2r 1  4C rr rr     	jmp     L00DC
0001D5r 1               ;
0001D5r 1               ; draw_entity_index = PLAYER_INDEX;
0001D5r 1               ;
0001D5r 1  A9 1E        L00DD:	lda     #$1E
0001D7r 1  8D rr rr     	sta     _draw_entity_index
0001DAr 1               ;
0001DAr 1               ; draw_entity();
0001DAr 1               ;
0001DAr 1  4C rr rr     	jmp     _draw_entity
0001DDr 1               
0001DDr 1               .endproc
0001DDr 1               
0001DDr 1               ; ---------------------------------------------------------------
0001DDr 1               ; void __near__ main (void)
0001DDr 1               ; ---------------------------------------------------------------
0001DDr 1               
0001DDr 1               .segment	"CODE"
0001DDr 1               
0001DDr 1               .proc	_main: near
0001DDr 1               
0001DDr 1               .segment	"BSS"
0000A8r 1               
0000A8r 1               L00BC:
0000A8r 1  00           	.res	1,$00
0000A9r 1               
0000A9r 1               .segment	"CODE"
0001DDr 1               
0001DDr 1               ;
0001DDr 1               ; screen_ptr = OS.savmsc;
0001DDr 1               ;
0001DDr 1  A5 59        	lda     $0058+1
0001DFr 1  8D rr rr     	sta     _screen_ptr+1
0001E2r 1  A5 58        	lda     $0058
0001E4r 1  8D rr rr     	sta     _screen_ptr
0001E7r 1               ;
0001E7r 1               ; set_entities();
0001E7r 1               ;
0001E7r 1  20 rr rr     	jsr     _set_entities
0001EAr 1               ;
0001EAr 1               ; start_benchmark();
0001EAr 1               ;
0001EAr 1  20 rr rr     	jsr     _start_benchmark
0001EDr 1               ;
0001EDr 1               ; for (times = 0; times < 100; ++times)
0001EDr 1               ;
0001EDr 1  A9 00        	lda     #$00
0001EFr 1  8D rr rr     	sta     L00BC
0001F2r 1  AD rr rr     L00DF:	lda     L00BC
0001F5r 1  C9 64        	cmp     #$64
0001F7r 1  B0 09        	bcs     L00C3
0001F9r 1               ;
0001F9r 1               ; one_frame();
0001F9r 1               ;
0001F9r 1  20 rr rr     	jsr     _one_frame
0001FCr 1               ;
0001FCr 1               ; for (times = 0; times < 100; ++times)
0001FCr 1               ;
0001FCr 1  EE rr rr     	inc     L00BC
0001FFr 1  4C rr rr     	jmp     L00DF
000202r 1               ;
000202r 1               ; end_benchmark();
000202r 1               ;
000202r 1  20 rr rr     L00C3:	jsr     _end_benchmark
000205r 1               ;
000205r 1               ; for(;;);
000205r 1               ;
000205r 1  4C rr rr     L00CE:	jmp     L00CE
000208r 1               
000208r 1               .endproc
000208r 1               
000208r 1               
